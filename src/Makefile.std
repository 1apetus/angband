#
# File: Makefile.std
# Standard makefile for Angband.
#
# This makefile probably requires GNU make.
#
# This makefile is intended for use with Unix machines running X11, gtk,
# (n)curses, termcap, or VT100, Slang, Linux VCS or SVGA library.  You can
# choose what systems below.
#
# You can also place your alterations to a file in the src/ directory called 
# "config", in which case that file will override what is specified here.
#
# If you used to use Makefile.gtk or Makefile.lsl, then just change the below
# SYS_gtk or SYS_lsl option to "true", and set the others to "false".
#

#### Things you should, or could, change ####

# What systems to try.
#
# By default, this tries to compile both the X11 and "curses" terminal mode
# ports in the same executable.

SYS_x11 = true
SYS_gcu = true
SYS_xaw = false
SYS_gtk = false
SYS_cap = false
SYS_lsl = false
SYS_sla = false
SYS_vcs = false  # Linux only, AFAIK
SYS_lfb = false  # Linux only
SYS_xpj = false  # Still experimental, and requires X11/Xaw/GTK to be enabled

# Basic compiler stuff
CC = gcc
CFLAGS = -Wall -O2 -g -fno-strength-reduce


#### Things you probably shouldn't change, unless there is a problem ####

# Import user prefs
-include config

# Eventually we'll have a mini-config tester here, but until then...

## Disable X11 if necessary
#ifneq ($(shell $(CC) -lX11 2&>/dev/null && echo -n "c"),c)
#  SYS_x11 = false
#endif
#
## Disable GCU if necessary
#ifneq ($(shell $(CC) -lncurses 2&>/dev/null && echo -n "c"),c)
#  SYS_gcu = false
#endif
#

uname = $(shell uname)

# Disable non-Linux ports on non-Linux
ifneq ($(uname),Linux)
  SYS_lfb = false

# Enable mkstemp() also
else
  CFLAGS += -DHAVE_MKSTEMP
endif

# Disable XPJ without X11/Xaw/GTK
ifeq ($(SYS_x11),false)
  ifeq ($(SYS_gtk),false)
    ifeq ($(SYS_xaw),false)
      SYS_xpj = false
    endif
  endif
endif


#### System definitions ####

#
# Support main-x11.c
#
# You may have to add various X11 include/library directories to the
# "CFLAGS", if your machine places files in a weird location, for example
# " -I/usr/X11R6/include", or "-L/usr/X11R6/lib" to LIBS.
#
ifeq ($(SYS_x11),true)
  CFLAGS += -DUSE_X11
  LIBS += -lX11
endif


#
# Support main-gcu.c
#
# If this fails, try replacing "-lncurses" with "-lcurses -ltermcap",
# and removing "-DUSE_NCURSES".
#
# See "main-gcu.c" and "config.h" for some optional "curses" defines,
# including "USE_GETCH" and "USE_CURS_SET".  Note that "config.h" will
# attempt to "guess" at many of these flags based on your system.
# 
# You may have to add " -I/usr/include/ncurses" to CFLAGS.
#
ifeq ($(SYS_gcu),true) 
  CFLAGS += -DUSE_GCU -DUSE_NCURSES
  LIBS += -lncurses
endif


#
# Support main-xaw.c
#
ifeq ($(SYS_xaw),true)
  CFLAGS += -DUSE_XAW
  LIBS += -lXaw -lXext -lSM -lICE -lXmu -lXt -lX11
endif


#
# Support main-gtk.c
#
# Note: gtk-config adds GTK and X11 includes and libraries as appropriate.
#
ifeq ($(SYS_gtk),true)
  CFLAGS += `gtk-config --cflags` -DUSE_GTK
  LIBS += `gtk-config --libs`
endif


#
# Support main-cap.c
#
# If you want this to work on simple vt100 terminals, add " -DUSE_HARDCODE"
# to CFLAGS.
#
ifeq ($(SYS_cap),true)
  CFLAGS += -DUSE_CAP
  LIBS += -ltermcap
endif


#
# Support main-lsl.c
#
ifeq ($(SYS_lsl),true)
  CFLAGS += -DUSE_LSL
  LIBS += -lz -lvgagl -lvga
endif


#
# Support main-vcs.c
#
ifeq ($(SYS_vcs),true)
  CFLAGS += -DUSE_VCS
endif


#
# Support main-sla.c
#
ifeq ($(SYS_sla),true)
  CFLAGS += -DUSE_SLA -I/usr/include/slang
  LIBS += -lslang
endif


#
# Support main-lfb.c
#
ifeq ($(SYS_lfb),true)
  CFLAGS += -DUSE_LFB
endif


#
# Support main-xpj.c
#
ifeq ($(SYS_xpj),true)
  CFLAGS += -DUSE_XPJ
endif


#### Old definitions, unchanged since at least 2000 ####

##
## Variation -- this might work better than the suggestion above
##
#CFLAGS = -I/usr/include/ncurses \
#         -Wall -O2 -fno-strength-reduce -fomit-frame-pointer \
#         -D"USE_X11" -D"USE_GCU" \
#         -D"USE_TPOSIX" -D"USE_CURS_SET"
#LIBS = -lX11 -lncurses
#LDFLAGS = -s


##
## Variation -- compile for Solaris
##
#CFLAGS = -D"USE_X11" -D"USE_GCU" -D"SOLARIS"
#LIBS = -lX11 -lsocket -lcurses


##
## Variation -- compile for SGI Indigo runnig Irix
##
#CFLAGS = -D"USE_X11" -D"USE_GCU" -D"SGI"
#LIBS = -lX11 -lcurses -ltermcap -lsun


##
## Variation -- compile for Dec ALPHA OSF/1 v2.0
##
#CC     = cc
##CFLAGS = -std -O -g3 -Olimit 4000 -D"USE_X11" -D"USE_GCU"
#CFLAGS = -std -g -D"USE_X11" -D"USE_GCU"
#LIBS   = -lX11 -lcurses -ltermcap -lrpcsvc


##
## Variation -- compile for Interactive Unix (ISC) systems
##
#CFLAGS = -D"USE_X11" -D"USE_GCU" -D"ISC"
#LIBS = -lX11 -lcurses -lnsl_s -linet -lcposix


##
## Variation -- Support fat binaries under NEXTSTEP
##
#CFLAGS = -D"USE_GCU" -arch m68k -arch i386
#LIBS = -lcurses -ltermcap



#### Targets and objects #####

# Set a target here
default: angband

# Makefile.inc contains an up-to-date set of object files to compile, so
# we include it
OBJEXT=.o
include Makefile.inc

OBJS = $(BASEOBJS) \
  main-cap.o main-gcu.o main-x11.o main-xaw.o main.o \
  main-gtk.o main-lsl.o main-sla.o main-vcs.o main-xpj.o \
  main-lfb.o maid-x11.o


#
# Targets
#

# Build the "Angband" program
angband: $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o angband $(OBJS) $(LIBS)

# Install the game.
install: ../angband

../angband: angband
	cp angband ..

# Clean up old junk
clean:
	-rm -f *.o angband

# Generate dependencies automatically
depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)


# Some file dependencies
%.o: %.c $(INCS)
	$(CC) $(CFLAGS) -o $@ -c $<

maid-x11.o: maid-x11.c $(INCS) maid-x11.h
main-cap.o: main-cap.c $(INCS) main.h
main-gcu.o: main-gcu.c $(INCS) main.h
main-gtk.o: main-gtk.c $(INCS) main.h maid-x11.h
main-lsl.o: main-lsl.c $(INCS) main.h
main-sla.o: main-sla.c $(INCS) main.h
main-vcs.o: main-vcs.c $(INCS) main.h
main-x11.o: main-x11.c $(INCS) main.h maid-x11.h
main-xaw.o: main-xaw.c $(INCS) main.h maid-x11.h
main-xpj.o: main-xpj.c $(INCS) main.h maid-x11.h
main-lfb.o: main-lfb.c $(INCS) main.h
main.o: main.c $(INCS) main.h
