# File: Makefile.std
# Standard makefile for Angband.
#
# This makefile probably requires GNU make.
#
# This makefile is intended for use with Unix machines running X11, gtk,
# (n)curses, termcap, or VT100, Slang, Linux VCS or SVGA library.  You can
# choose what systems below.
#
# You can also place your alterations to a file in the src/ directory called 
# "config", in which case that file will override what is specified here.
#
# If you used to use Makefile.gtk or Makefile.lsl, uncomment the appropriate
# lines below.
#

#### Things you should, or could, change ####


# What systems to try.
#
# By default, this tries to compile both the X11 and "curses" terminal mode
# ports in the same executable.  On Linux only, it also builds the lfb 'console' 
# module.



# support X11 (main-x11.c)
# You may have to add various X11 include/library directories to the
# "CFLAGS", if your machine places files in a weird location, for example
# " -I/usr/X11R6/include", or "-L/usr/X11R6/lib" to LIBS.
SYS_x11 = -DUSE_X11 -lX11


# support curses console mode (main-gcu.c)
# If this fails, try the alternate below
SYS_gcu = -DUSE_GCU -DUSE_NCURSES -lncurses
#SYS_gcu = -DUSE_GCU -lcurses -ltermcap

# support Xaw motif (main-xaw.c)
#SYS_xaw = -DUSE_XAW -lXaw -lXext -lSM -lICE -lXmu -lXt -lX11

# Support gtk alternative x11 (main-gtk.c)
#SYS_gtk = $(shell gtk-config --cflags) -DUSE_GTK $(shell gtk-config --libs)



# Linux specific flags (appended conditionally below)

# support raw console  (main-lfb.c)
SYS_lfb = -DUSE_LFB
#
# support linux in VGA mode (main-lsl.c)
#SYS_lsl = -DUSE_LSL -lz -lvgagl -lvga


# Experimental. requires X11/Xaw/GTK to be enabled (main-xpj.c)
#SYS_xpj = -DUSE_xpj



# Old raw tty protocols that may not work
# With curses support, all are effectively superceded by USE_GCU

# use direct termio on 8bit color-depth screen (main-vcs.c)
#SYS_vcs = -DUSE_VCS

# Unix 'slang' (Also available on OS/2) (main-sla.c)
#SYS_sla = -DUSE_SLA -I/usr/include/slang -lslang

# primitive termcap emulation of a vt100 (slow and unreliable) (main-cap.c)
# -DUSE_HARDCODE in the unlikely event you are using a VT100 without curses
#SYS_cap = -DUSE_CAP -ltermcap


# linux-specific modules are appended below

MODULES = $(SYS_x11) $(SYS_gcu) $(SYS_xaw) $(SYS_gtk) $(SYS_xpj) $(SYS_sla) $(SYS_cap)

MCFLAGS = $(patsubst -l%,,$(MODULES))
MLFLAGS = $(patsubst -D%,,$(patsubst -I%,, $(MODULES)))



# Basic compiler stuff

# Add additional search directives here
# Example: -I/usr/X11R6/include -I/usr/include/ncurses
INCLUDES =
# Example: -L/usr/X11R6/lib
LFLAGS =

CC = gcc
CFLAGS = -Wall $(OPT) -fno-strength-reduce $(MCFLAGS) $(INCLUDES)
LIBS = $(LFLAGS) $(MLFLAGS)

X11OBJS = maid-x11.o main-x11.o main-xaw.o main-gtk.o main-xpj.o
MAINOBJS = $(X11OBJS) main-cap.o main-gcu.o main-gtk.o main-sla.o $(LINUXOBJ)
OBJS = $(BASEOBJS) $(MAINOBJS)


ifeq ($(OPT),)
OPT = -O2
endif

# Version info
VERSION = 3_0_7s3
# Name of the game
EXE = angband


#### Things you probably shouldn't change, unless there is a problem ####

# Import user prefs
# If you don't want to edit this file, put your module redefinitions
# and build flags in "./config"
-include config


uname = $(shell uname)

# Enable linux-specific modules, if requested.
ifeq ($(uname),Linux)
  MODULES += $(SYS_lsl) $(SYS_lfb) $(SYS_vcs)
  LINUXOBJS = main-lsl.o main-vcs.o main-lfb.o
  CFLAGS += -DHAVE_MKSTEMP
endif



#### Old definitions, unchanged since at least 2000 ####

##
## Variation -- this might work better than the suggestion above
##
#CFLAGS = -I/usr/include/ncurses \
#         -Wall -O2 -fno-strength-reduce -fomit-frame-pointer \
#         -D"USE_X11" -D"USE_GCU" \
#         -D"USE_TPOSIX" -D"USE_CURS_SET"
#LIBS = -lX11 -lncurses
#LDFLAGS = -s


##
## Variation -- compile for Solaris
##
#CFLAGS = -D"USE_X11" -D"USE_GCU" -D"SOLARIS"
#LIBS = -lX11 -lsocket -lcurses


##
## Variation -- compile for SGI Indigo runnig Irix
##
#CFLAGS = -D"USE_X11" -D"USE_GCU" -D"SGI"
#LIBS = -lX11 -lcurses -ltermcap -lsun


##
## Variation -- compile for Dec ALPHA OSF/1 v2.0
##
#CC     = cc
##CFLAGS = -std -O -g3 -Olimit 4000 -D"USE_X11" -D"USE_GCU"
#CFLAGS = -std -g -D"USE_X11" -D"USE_GCU"
#LIBS   = -lX11 -lcurses -ltermcap -lrpcsvc


##
## Variation -- compile for Interactive Unix (ISC) systems
##
#CFLAGS = -D"USE_X11" -D"USE_GCU" -D"ISC"
#LIBS = -lX11 -lcurses -lnsl_s -linet -lcposix


#### Targets and objects #####

# Set a target here
default: $(EXE)

# Makefile.inc contains an up-to-date set of object files to compile, so
# we include it
OBJEXT=.o
include Makefile.inc


#
# Targets
#

# Build the "Angband" program
$(EXE): $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(EXE) $(OBJS) $(LIBS)

# Install the game.
install: ../$(EXE)


../$(EXE): $(EXE)
	cp $(EXE) ..

# Clean up old junk
clean:
	-rm -f *.o $(EXE)

# make a distribution
DIRS = lib/apex lib/bone lib/data lib/edit lib/file lib/help lib/info \
		lib/pref lib/save lib/user lib/xtra/sound lib/xtra/graf lib/xtra/font

TMPDIR = ./$(EXE)$(VERSION)
dist:
	@-rm -rf $(TMPDIR)
	@echo making directories...
	@for i in $(DIRS) ; do mkdir -p $(TMPDIR)/$$i ; done
	@echo copying files...
	@cp ../lib/edit/*.txt $(TMPDIR)/lib/edit
	@cp ../lib/file/*.txt $(TMPDIR)/lib/file
	@cp ../lib/help/*.txt ../lib/help/*.hlp $(TMPDIR)/lib/help
	@cp ../lib/pref/*.prf $(TMPDIR)/lib/pref
	@cp ../lib/xtra/font/*.txt $(TMPDIR)/lib/xtra/font
	@echo attempting to install sound and graphics
	@-cp ../lib/xtra/sound/*.wav $(TMPDIR)/lib/xtra/sound
	@-cp ../lib/xtra/graf/*.bmp $(TMPDIR)/lib/xtra/graf
	@cp $(EXE) $(TMPDIR)
	tar czf ../$(EXE)$(VERSION).tgz $(TMPDIR)
	rm -rf $(TMPDIR)


#  Verify module arguments
args:
	@echo CFLAGS = $(CFLAGS)
	@echo LIBS = $(LIBS)


# Generate dependencies automatically
depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)


# Some file dependencies
%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<

# X11 dependencies
$(X11OBJS) : $(INCS) maid-x11.h main.h

# Basic dependencies for main-xxx.c, main.c
$(MAINOBJS) : main.h $(INCS)

